      <program>                ::= program identifier LPAREN <identifier-list> RPAREN SEMICOLON <declarations> <sub-declarations> <compound-statement>      <identifier-list>        ::= identifier <identifier-list-tail>      <identifier-list-tail>   ::= COMMA identifier <identifier-list-tail>                               ::=      <declarations>           ::= var <declaration-list>                               ::=      <declaration-list>       ::= <identifier-list> COLON <type> SEMICOLON <declaration-list-tail>      <declaration-list-tail>  ::=  <identifier-list> COLON <type> SEMICOLON <declaration-list-tail>                               ::=      <type>                   ::= <standard-type>                               ::= <array-type>      <standard-type>          ::= integer                               ::= real      <array-type>             ::= array LBRACKET intconstant DOUBLEDOT intconstant RBRACKET of <standard-type>      <sub-declarations>       ::= <subprogram-declaration> <sub-declarations>                               ::=      <subprogram-declaration> ::= <subprogram-head> <declarations> <compound-statement>      <subprogram-head>        ::= function identifier <arguments> COLON result <standard-type> SEMICOLON                               ::= procedure identifier <arguments> SEMICOLON      <arguments>              ::= LPAREN <parameter-list> RPAREN                               ::=      <parameter-list>         ::= <identifier-list> COLON <type> <parameter-list-tail>      <parameter-list-tail>    ::= SEMICOLON <identifier-list> COLON <type> <parameter-list-tail>                               ::=      <compound-statement>     ::= begin <statement-list> end      <statement-list>         ::= <statement> <statement-list-tail>      <statement-list-tail>    ::= SEMICOLON <statement> <statement-list-tail>                               ::=      <statement>              ::= <elementary-statement>                               ::= if <expression> then <statement> <else-clause>                               ::= while <expression> do <statement>      <else-clause>            ::= else <statement>                               ::=      <elementary-statement>   ::= identifier <es-tail>                               ::= <compound-statement>      <es-tail>                ::= <subscript> assignop <expression>                               ::= <parameters>      <subscript>              ::= LBRACKET <expression> RBRACKET                               ::=      <parameters>             ::= LPAREN <expression-list> RPAREN                               ::=      <expression-list>        ::= <expression> <expression-list-tail>      <expression-list-tail>   ::= COMMA <expression> <expression-list-tail>                               ::=      <expression>             ::= <simple-expression> <expression-tail>      <expression-tail>        ::= relop <simple-expression>                               ::=      <simple-expression>      ::= <term> <simple-expression-tail>                               ::= <sign> <term> <simple-expression-tail>      <simple-expression-tail> ::= addop <term> <simple-expression-tail>                               ::=      <term>                   ::= <factor> <term-tail>      <term-tail>              ::= mulop <factor> <term-tail>                               ::=      <factor>                 ::= identifier <factor-tail>                               ::= <constant>                               ::= LPAREN <expression> RPAREN                               ::= not <factor>      <factor-tail>            ::= <actual-parameters>                               ::= <subscript>      <actual-parameters>      ::= LPAREN <expression-list> RPAREN                               ::=      <sign>                   ::= unaryplus                               ::= unaryminus      <Goal>                   ::= <program> endmarker      <constant>               ::= intconstant                               ::= realconstant